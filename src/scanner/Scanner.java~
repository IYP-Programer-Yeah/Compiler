/* The following code was generated by JFlex 1.6.1 */

/*todo:
*1- delimeter
*/

package scanner;

import scanner.ScannerSymbol;
import scanner.IntegerSize;
import scanner.RealNumberSize;
import scanner.CharacterType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>F:/java/Compiler/src/Scanner/Lexer.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRING_ESCAPE_SEQUENCE = 4;
  public static final int CHARACTER = 6;
  public static final int CHARACTER_ESCAPE_SEQUENCE = 8;
  public static final int SINGLE_LINE_COMMENT = 10;
  public static final int COMMENT_BLOCK = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\36\1\7\1\0"+
    "\1\31\1\15\1\16\1\11\1\53\1\54\1\45\1\44\1\47\1\22"+
    "\1\20\1\46\1\17\1\72\1\75\1\74\2\5\1\73\1\5\1\33"+
    "\1\6\1\25\1\50\1\40\1\35\1\37\1\105\1\0\3\4\1\24"+
    "\1\21\1\23\5\31\1\34\10\31\1\14\5\31\1\55\1\10\1\56"+
    "\1\43\1\30\1\0\1\63\1\57\1\67\1\27\1\26\1\100\1\101"+
    "\1\71\1\77\1\32\1\64\1\61\1\31\1\76\1\60\2\31\1\62"+
    "\1\70\1\66\1\13\1\104\1\103\1\12\1\65\1\102\1\51\1\41"+
    "\1\52\1\42\43\0\4\31\4\0\1\31\12\0\1\31\4\0\1\31"+
    "\5\0\27\31\1\0\37\31\1\0\u01ca\31\4\0\14\31\16\0\5\31"+
    "\7\0\1\31\1\0\1\31\201\0\5\31\1\0\2\31\2\0\4\31"+
    "\10\0\1\31\1\0\3\31\1\0\1\31\1\0\24\31\1\0\123\31"+
    "\1\0\213\31\10\0\236\31\11\0\46\31\2\0\1\31\7\0\47\31"+
    "\7\0\1\31\100\0\33\31\5\0\3\31\30\0\1\31\24\0\53\31"+
    "\43\0\2\31\1\0\143\31\1\0\1\31\17\0\2\31\7\0\2\31"+
    "\12\0\3\31\2\0\1\31\20\0\1\31\1\0\36\31\35\0\131\31"+
    "\13\0\1\31\30\0\41\31\11\0\2\31\4\0\1\31\5\0\26\31"+
    "\4\0\1\31\11\0\1\31\3\0\1\31\27\0\31\31\107\0\1\31"+
    "\1\0\13\31\127\0\66\31\3\0\1\31\22\0\1\31\7\0\12\31"+
    "\17\0\7\31\1\0\7\31\5\0\10\31\2\0\2\31\2\0\26\31"+
    "\1\0\7\31\1\0\1\31\3\0\4\31\3\0\1\31\20\0\1\31"+
    "\15\0\2\31\1\0\3\31\16\0\4\31\7\0\1\31\11\0\6\31"+
    "\4\0\2\31\2\0\26\31\1\0\7\31\1\0\2\31\1\0\2\31"+
    "\1\0\2\31\37\0\4\31\1\0\1\31\23\0\3\31\20\0\11\31"+
    "\1\0\3\31\1\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31"+
    "\3\0\1\31\22\0\1\31\17\0\2\31\17\0\1\31\23\0\10\31"+
    "\2\0\2\31\2\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31"+
    "\3\0\1\31\36\0\2\31\1\0\3\31\17\0\1\31\21\0\1\31"+
    "\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31\1\0\1\31"+
    "\1\0\2\31\3\0\2\31\3\0\3\31\3\0\14\31\26\0\1\31"+
    "\50\0\1\31\13\0\10\31\1\0\3\31\1\0\27\31\1\0\12\31"+
    "\1\0\5\31\3\0\1\31\32\0\2\31\6\0\2\31\43\0\10\31"+
    "\1\0\3\31\1\0\27\31\1\0\12\31\1\0\5\31\3\0\1\31"+
    "\40\0\1\31\1\0\2\31\17\0\2\31\22\0\10\31\1\0\3\31"+
    "\1\0\51\31\2\0\1\31\20\0\1\31\21\0\2\31\30\0\6\31"+
    "\5\0\22\31\3\0\30\31\1\0\11\31\1\0\1\31\2\0\7\31"+
    "\72\0\60\31\1\0\2\31\13\0\10\31\72\0\2\31\1\0\1\31"+
    "\2\0\2\31\1\0\1\31\2\0\1\31\6\0\4\31\1\0\7\31"+
    "\1\0\3\31\1\0\1\31\1\0\1\31\2\0\2\31\1\0\4\31"+
    "\1\0\2\31\11\0\1\31\2\0\5\31\1\0\1\31\25\0\4\31"+
    "\40\0\1\31\77\0\10\31\1\0\44\31\33\0\5\31\163\0\53\31"+
    "\24\0\1\31\20\0\6\31\4\0\4\31\3\0\1\31\3\0\2\31"+
    "\7\0\3\31\4\0\15\31\14\0\1\31\21\0\46\31\1\0\1\31"+
    "\5\0\1\31\2\0\53\31\1\0\u014d\31\1\0\4\31\2\0\7\31"+
    "\1\0\1\31\1\0\4\31\2\0\51\31\1\0\4\31\2\0\41\31"+
    "\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31\2\0\17\31"+
    "\1\0\71\31\1\0\4\31\2\0\103\31\45\0\20\31\20\0\125\31"+
    "\14\0\u026c\31\2\0\21\31\1\0\32\31\5\0\113\31\3\0\3\31"+
    "\17\0\15\31\1\0\4\31\16\0\22\31\16\0\22\31\16\0\15\31"+
    "\1\0\3\31\17\0\64\31\43\0\1\31\3\0\2\31\103\0\130\31"+
    "\10\0\51\31\1\0\1\31\5\0\106\31\12\0\35\31\63\0\36\31"+
    "\2\0\5\31\13\0\54\31\25\0\7\31\70\0\27\31\11\0\65\31"+
    "\122\0\1\31\135\0\57\31\21\0\7\31\67\0\36\31\15\0\2\31"+
    "\12\0\54\31\32\0\44\31\51\0\3\31\12\0\44\31\153\0\4\31"+
    "\1\0\4\31\3\0\2\31\11\0\300\31\100\0\u0116\31\2\0\6\31"+
    "\2\0\46\31\2\0\6\31\2\0\10\31\1\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\37\31\2\0\65\31\1\0\7\31\1\0\1\31"+
    "\3\0\3\31\1\0\7\31\3\0\4\31\2\0\6\31\4\0\15\31"+
    "\5\0\3\31\1\0\7\31\102\0\2\31\23\0\1\31\34\0\1\31"+
    "\15\0\1\31\20\0\15\31\3\0\33\31\107\0\1\31\4\0\1\31"+
    "\2\0\12\31\1\0\1\31\3\0\5\31\6\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\4\31\1\0\13\31\2\0\4\31\5\0\5\31"+
    "\4\0\1\31\21\0\51\31\u0a77\0\57\31\1\0\57\31\1\0\205\31"+
    "\6\0\4\31\3\0\2\31\14\0\46\31\1\0\1\31\5\0\1\31"+
    "\2\0\70\31\7\0\1\31\20\0\27\31\11\0\7\31\1\0\7\31"+
    "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31"+
    "\1\0\7\31\120\0\1\31\u01d5\0\3\31\31\0\11\31\7\0\5\31"+
    "\2\0\5\31\4\0\126\31\6\0\3\31\1\0\132\31\1\0\4\31"+
    "\5\0\51\31\3\0\136\31\21\0\33\31\65\0\20\31\u0200\0\u19b6\31"+
    "\112\0\u51cd\31\63\0\u048d\31\103\0\56\31\2\0\u010d\31\3\0\20\31"+
    "\12\0\2\31\24\0\57\31\20\0\31\31\10\0\120\31\47\0\11\31"+
    "\2\0\147\31\2\0\4\31\1\0\4\31\14\0\13\31\115\0\12\31"+
    "\1\0\3\31\1\0\4\31\1\0\27\31\25\0\1\31\7\0\64\31"+
    "\16\0\62\31\76\0\6\31\3\0\1\31\16\0\34\31\12\0\27\31"+
    "\31\0\35\31\7\0\57\31\34\0\1\31\60\0\51\31\27\0\3\31"+
    "\1\0\10\31\24\0\27\31\3\0\1\31\5\0\60\31\1\0\1\31"+
    "\3\0\2\31\2\0\5\31\2\0\1\31\1\0\1\31\30\0\3\31"+
    "\2\0\13\31\7\0\3\31\14\0\6\31\2\0\6\31\2\0\6\31"+
    "\11\0\7\31\1\0\7\31\221\0\43\31\35\0\u2ba4\31\14\0\27\31"+
    "\4\0\61\31\u2104\0\u016e\31\2\0\152\31\46\0\7\31\14\0\5\31"+
    "\5\0\1\31\1\0\12\31\1\0\15\31\1\0\5\31\1\0\1\31"+
    "\1\0\2\31\1\0\2\31\1\0\154\31\41\0\u016b\31\22\0\100\31"+
    "\2\0\66\31\50\0\15\31\66\0\2\31\30\0\3\31\31\0\1\31"+
    "\6\0\5\31\1\0\207\31\7\0\1\31\34\0\32\31\4\0\1\31"+
    "\1\0\32\31\13\0\131\31\3\0\6\31\2\0\6\31\2\0\6\31"+
    "\2\0\3\31\3\0\2\31\3\0\2\31\31\0\14\31\1\0\32\31"+
    "\1\0\23\31\1\0\2\31\1\0\17\31\2\0\16\31\42\0\173\31"+
    "\105\0\65\31\u010b\0\35\31\3\0\61\31\57\0\37\31\21\0\33\31"+
    "\65\0\36\31\2\0\44\31\4\0\10\31\1\0\5\31\52\0\236\31"+
    "\u0362\0\6\31\2\0\1\31\1\0\54\31\1\0\2\31\3\0\1\31"+
    "\2\0\27\31\252\0\26\31\12\0\32\31\106\0\70\31\6\0\2\31"+
    "\100\0\1\31\17\0\4\31\1\0\3\31\1\0\33\31\54\0\35\31"+
    "\203\0\66\31\12\0\26\31\12\0\23\31\215\0\111\31\u03ba\0\65\31"+
    "\113\0\55\31\40\0\31\31\32\0\44\31\134\0\60\31\16\0\4\31"+
    "\u04bb\0\53\31\u0955\0\u036f\31\221\0\143\31\u0b9d\0\u042f\31\u33d1\0\u0239\31"+
    "\u04c7\0\105\31\13\0\1\31\102\0\15\31\u4060\0\2\31\u23fe\0\125\31"+
    "\1\0\107\31\1\0\2\31\2\0\1\31\2\0\2\31\2\0\4\31"+
    "\1\0\14\31\1\0\1\31\1\0\7\31\1\0\101\31\1\0\4\31"+
    "\2\0\10\31\1\0\7\31\1\0\34\31\1\0\4\31\1\0\5\31"+
    "\1\0\1\31\3\0\7\31\1\0\u0154\31\2\0\31\31\1\0\31\31"+
    "\1\0\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0\37\31"+
    "\1\0\31\31\1\0\37\31\1\0\31\31\1\0\10\31\u1634\0\4\31"+
    "\1\0\33\31\1\0\2\31\1\0\1\31\2\0\1\31\1\0\12\31"+
    "\1\0\4\31\1\0\1\31\1\0\1\31\6\0\1\31\4\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\3\31\1\0\2\31\1\0\1\31"+
    "\2\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\0\1\31\2\0\4\31\1\0\7\31\1\0\4\31"+
    "\1\0\4\31\1\0\1\31\1\0\12\31\1\0\21\31\5\0\3\31"+
    "\1\0\5\31\1\0\21\31\u1144\0\ua6d7\31\51\0\u1035\31\13\0\336\31"+
    "\u3fe2\0\u021e\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\2\3"+
    "\1\7\1\10\1\4\1\11\1\12\1\13\3\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\13\3\1\36\1\37\1\40\1\41\1\42\2\43"+
    "\1\44\1\45\1\46\1\47\2\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\36\1\60\1\61\1\62"+
    "\1\63\2\64\1\65\1\66\1\67\1\70\2\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\2\102"+
    "\3\103\1\3\1\104\1\0\1\105\1\106\1\0\1\3"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\3\3"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\16\3\1\127\7\3\1\44\1\130\2\0\1\65"+
    "\1\131\3\0\1\132\2\104\1\0\1\133\1\134\1\3"+
    "\1\135\22\3\1\136\1\3\1\137\6\3\1\44\1\130"+
    "\2\0\1\65\1\131\2\0\2\3\1\140\2\3\1\141"+
    "\1\3\1\142\1\143\2\3\1\144\2\3\1\145\1\146"+
    "\7\3\1\147\2\3\1\150\1\130\2\0\1\131\2\0"+
    "\1\151\3\3\1\152\3\3\1\153\2\0\1\3\1\154"+
    "\3\3\1\155\1\156\1\3\1\157\1\130\1\160\1\0"+
    "\1\131\1\161\1\0\1\162\1\3\1\163\1\164\1\165"+
    "\1\3\1\146\1\166\1\167\1\170\2\3\1\130\1\131"+
    "\1\171\1\3\1\172\1\173\1\130\1\131\1\174\1\130"+
    "\1\131\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u01ea\0\u0276\0\u02bc\0\u01ea\0\u01ea\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u01ea\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u01ea\0\u01ea"+
    "\0\u071c\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u01ea"+
    "\0\u0aaa\0\u01ea\0\u01ea\0\u0af0\0\u01ea\0\u0b36\0\u01ea\0\u01ea"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u0c4e\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u0c94"+
    "\0\u01ea\0\u0cda\0\u01ea\0\u01ea\0\u0d20\0\u0d66\0\u0dac\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u0df2\0\u0e38"+
    "\0\u01ea\0\u0e7e\0\u01ea\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u01ea"+
    "\0\u01ea\0\u0fdc\0\u1022\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u1068\0\u01ea\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u0276\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u0f0a\0\u01ea\0\u01ea\0\u19b4"+
    "\0\u19fa\0\u01ea\0\u01ea\0\u1a40\0\u1068\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u0276"+
    "\0\u1f72\0\u0276\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u01ea\0\u215c\0\u21a2\0\u21e8\0\u01ea\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u0276\0\u238c\0\u23d2\0\u0276\0\u2418\0\u0276"+
    "\0\u0276\0\u245e\0\u24a4\0\u0276\0\u24ea\0\u2530\0\u0276\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u0276"+
    "\0\u27a6\0\u27ec\0\u0276\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u0276\0\u29d6\0\u2a1c\0\u2a62\0\u0276\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u0276\0\u2b7a\0\u2bc0\0\u2c06\0\u0276\0\u2c4c\0\u2c92"+
    "\0\u2cd8\0\u0276\0\u0276\0\u2d1e\0\u0276\0\u2d64\0\u01ea\0\u0bc2"+
    "\0\u2daa\0\u01ea\0\u0d66\0\u0276\0\u2df0\0\u0276\0\u0276\0\u0276"+
    "\0\u2e36\0\u01ea\0\u0276\0\u0276\0\u0276\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u0276\0\u2f94\0\u0276\0\u0276\0\u2fda\0\u3020\0\u0276"+
    "\0\u3066\0\u30ac\0\u01ea\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\2\14\1\15\1\10\1\16"+
    "\1\13\1\17\1\20\1\21\1\22\1\23\1\24\1\13"+
    "\1\25\2\13\1\26\1\27\1\30\3\13\1\14\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\13\1\55\1\56\3\13\1\57"+
    "\1\60\1\61\1\13\4\14\1\13\1\62\1\63\1\64"+
    "\1\13\1\65\1\66\1\10\1\67\2\70\4\67\1\71"+
    "\1\72\75\67\1\73\1\74\1\75\2\73\1\76\1\77"+
    "\3\100\1\101\1\102\1\103\2\73\1\76\13\73\1\77"+
    "\23\73\1\104\2\73\1\105\1\106\2\73\1\107\3\73"+
    "\4\76\1\110\1\73\1\111\3\73\1\112\1\100\1\113"+
    "\2\114\5\113\1\115\1\116\74\113\1\117\1\120\1\121"+
    "\2\117\1\122\1\123\1\117\2\124\1\125\1\126\1\127"+
    "\2\117\1\122\13\117\1\123\23\117\1\130\2\117\1\131"+
    "\1\132\2\117\1\133\3\117\4\122\1\134\1\117\1\135"+
    "\3\117\1\136\1\124\1\137\1\140\1\141\103\137\15\142"+
    "\1\143\1\144\67\142\110\0\1\12\107\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\7\13\6\0\2\14\10\0"+
    "\1\14\1\146\1\147\4\0\1\147\4\0\1\14\36\0"+
    "\4\14\14\0\1\13\2\0\1\150\1\0\1\151\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\152\1\13"+
    "\22\0\13\13\4\0\1\153\6\13\5\0\1\13\2\0"+
    "\1\154\1\0\1\155\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\16\0\1\156\1\157\105\0\1\160\74\0\2\14\3\0"+
    "\1\161\4\0\1\14\1\146\1\147\4\0\1\147\4\0"+
    "\1\14\36\0\4\14\15\0\2\146\10\0\1\146\13\0"+
    "\1\146\36\0\4\146\32\0\1\162\67\0\1\13\5\0"+
    "\1\163\2\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\2\13\1\164\10\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\1\165\4\13\1\0\1\13\22\0\1\13\1\166"+
    "\11\13\4\0\7\13\5\0\1\13\2\0\1\167\1\0"+
    "\1\170\3\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\13\13\4\0\7\13\36\0\1\171"+
    "\105\0\1\172\105\0\1\173\105\0\1\174\111\0\1\175"+
    "\110\0\1\176\45\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\5\13\1\0\1\13\22\0\1\13"+
    "\1\177\1\13\1\200\2\13\1\201\4\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\1\13\1\202\11\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\1\203\4\13\1\0\1\13\22\0"+
    "\13\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\3\13\1\204\7\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\1\13\1\205\2\13\1\206\5\13\1\207"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\5\13\1\0\1\13\22\0\7\13"+
    "\1\210\2\13\1\211\4\0\1\13\1\212\3\13\1\213"+
    "\1\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\13\13\4\0"+
    "\1\214\1\13\1\215\4\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\1\13\1\216\1\217\1\13\1\220\6\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\1\13\1\221"+
    "\11\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\10\13\1\222\1\13\1\223\4\0\7\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\1\13\1\224\11\13\4\0\7\13"+
    "\1\0\1\67\2\0\4\67\2\0\75\67\7\0\1\12"+
    "\100\0\1\75\110\0\1\225\11\0\1\225\52\0\4\225"+
    "\14\0\3\226\10\0\1\226\1\0\1\226\1\0\2\226"+
    "\1\0\2\226\3\0\1\226\23\0\1\226\3\0\1\226"+
    "\3\0\1\226\2\0\4\226\2\0\1\226\11\0\3\227"+
    "\10\0\1\227\1\0\1\227\1\0\2\227\1\0\2\227"+
    "\3\0\1\227\23\0\1\227\3\0\1\227\3\0\1\227"+
    "\2\0\4\227\2\0\1\227\11\0\3\230\10\0\1\230"+
    "\1\0\1\230\1\0\2\230\1\0\2\230\3\0\1\230"+
    "\23\0\1\230\3\0\1\230\3\0\1\230\2\0\4\230"+
    "\2\0\1\230\5\0\1\113\2\0\5\113\2\0\74\113"+
    "\2\0\1\121\110\0\1\231\11\0\1\231\52\0\4\231"+
    "\14\0\3\232\10\0\1\232\1\0\1\232\1\0\2\232"+
    "\1\0\2\232\3\0\1\232\23\0\1\232\3\0\1\232"+
    "\3\0\1\232\2\0\4\232\2\0\1\232\11\0\3\233"+
    "\10\0\1\233\1\0\1\233\1\0\2\233\1\0\2\233"+
    "\3\0\1\233\23\0\1\233\3\0\1\233\3\0\1\233"+
    "\2\0\4\233\2\0\1\233\11\0\3\234\10\0\1\234"+
    "\1\0\1\234\1\0\2\234\1\0\2\234\3\0\1\234"+
    "\23\0\1\234\3\0\1\234\3\0\1\234\2\0\4\234"+
    "\2\0\1\234\5\0\1\137\2\0\103\137\2\0\1\141"+
    "\103\0\15\142\2\0\67\142\15\0\1\141\115\0\3\145"+
    "\1\235\1\0\1\145\26\0\2\145\3\0\1\145\10\0"+
    "\1\145\1\0\1\145\11\0\2\146\10\0\1\146\1\0"+
    "\1\147\1\0\1\236\1\237\1\0\1\147\1\237\3\0"+
    "\1\146\36\0\4\146\2\0\1\236\12\0\2\240\10\0"+
    "\1\240\2\0\1\241\10\0\1\240\10\0\1\241\25\0"+
    "\4\240\17\0\1\242\1\0\1\243\100\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\244\3\13\4\0\7\13\5\0"+
    "\3\245\10\0\1\245\1\0\1\245\1\0\2\245\1\0"+
    "\2\245\3\0\1\245\23\0\1\245\3\0\1\245\3\0"+
    "\1\245\2\0\4\245\2\0\1\245\11\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\246\3\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\11\13\1\247\1\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\13\13\4\0"+
    "\2\13\1\250\4\13\5\0\1\13\5\0\1\13\1\251"+
    "\1\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\1\13\1\252\11\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\1\253\4\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\7\13\1\254\3\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\5\13\1\0\1\13\22\0\13\13"+
    "\4\0\1\255\6\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\7\13\1\256\1\257\2\13\4\0\7\13\5\0\1\13"+
    "\5\0\1\13\1\260\1\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\13\13\4\0\1\261"+
    "\6\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\11\13\1\262"+
    "\1\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\4\13\1\263\6\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\3\13\1\264\7\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\1\13\1\265\11\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\13\13\4\0"+
    "\4\13\1\266\2\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\13\13\4\0\1\13\1\267\5\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\270\1\271\2\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\3\13\1\272\7\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\5\13\1\0\1\13\22\0\1\13"+
    "\1\273\11\13\4\0\7\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\2\13\1\274\10\13\4\0\7\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\7\13\1\275\3\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\12\13\1\276\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\13\13\4\0"+
    "\1\13\1\277\5\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\13\13\4\0\1\13\1\300\5\13\6\0\1\301\11\0"+
    "\1\301\52\0\4\301\14\0\3\302\10\0\1\302\1\0"+
    "\1\302\1\0\2\302\1\0\2\302\3\0\1\302\23\0"+
    "\1\302\3\0\1\302\3\0\1\302\2\0\4\302\2\0"+
    "\1\302\11\0\3\303\10\0\1\303\1\0\1\303\1\0"+
    "\2\303\1\0\2\303\3\0\1\303\23\0\1\303\3\0"+
    "\1\303\3\0\1\303\2\0\4\303\2\0\1\303\11\0"+
    "\3\304\10\0\1\304\1\0\1\304\1\0\2\304\1\0"+
    "\2\304\3\0\1\304\23\0\1\304\3\0\1\304\3\0"+
    "\1\304\2\0\4\304\2\0\1\304\12\0\1\305\11\0"+
    "\1\305\52\0\4\305\14\0\3\306\10\0\1\306\1\0"+
    "\1\306\1\0\2\306\1\0\2\306\3\0\1\306\23\0"+
    "\1\306\3\0\1\306\3\0\1\306\2\0\4\306\2\0"+
    "\1\306\11\0\3\307\10\0\1\307\1\0\1\307\1\0"+
    "\2\307\1\0\2\307\3\0\1\307\23\0\1\307\3\0"+
    "\1\307\3\0\1\307\2\0\4\307\2\0\1\307\11\0"+
    "\3\310\10\0\1\310\1\0\1\310\1\0\2\310\1\0"+
    "\2\310\3\0\1\310\23\0\1\310\3\0\1\310\3\0"+
    "\1\310\2\0\4\310\2\0\1\310\12\0\2\240\10\0"+
    "\1\240\3\0\1\236\1\237\2\0\1\237\3\0\1\240"+
    "\36\0\4\240\2\0\1\236\12\0\2\240\10\0\1\240"+
    "\13\0\1\240\36\0\4\240\14\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\13\13\4\0\1\13\1\311\5\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\1\312"+
    "\4\13\1\0\1\13\22\0\13\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\1\313\4\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\4\13\1\314\6\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\5\13\1\0\1\13\22\0\1\315"+
    "\12\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\2\13\1\316\10\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\4\13\1\317\6\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\1\320\4\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\13\13\4\0\3\13"+
    "\1\321\3\13\5\0\1\13\5\0\1\13\1\322\1\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\13\13\4\0\7\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\1\13\1\323\11\13\4\0\7\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\1\324"+
    "\4\13\1\0\1\13\22\0\13\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\7\13\1\325\1\13\1\326"+
    "\1\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\1\327\4\13\1\0\1\13"+
    "\22\0\13\13\4\0\7\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\3\13\1\330\7\13\4\0\7\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\13\13\4\0\1\13\1\331\5\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\3\13\1\332\7\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\1\333\4\13\1\0\1\13\22\0"+
    "\13\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\7\13\1\334\3\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\2\13\1\335\10\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\4\13\1\336\6\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\11\13\1\337"+
    "\1\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\1\13\1\340\11\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\4\13\1\341\6\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\2\13\1\342\10\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\1\13\1\343\3\13\1\0\1\13\22\0"+
    "\13\13\4\0\7\13\5\0\3\344\10\0\1\344\1\0"+
    "\1\344\1\0\2\344\1\0\2\344\3\0\1\344\23\0"+
    "\1\344\3\0\1\344\3\0\1\344\2\0\4\344\2\0"+
    "\1\344\11\0\3\345\10\0\1\345\1\0\1\345\1\0"+
    "\2\345\1\0\2\345\3\0\1\345\23\0\1\345\3\0"+
    "\1\345\3\0\1\345\2\0\4\345\2\0\1\345\11\0"+
    "\3\346\10\0\1\346\1\0\1\346\1\0\2\346\1\0"+
    "\2\346\3\0\1\346\23\0\1\346\3\0\1\346\3\0"+
    "\1\346\2\0\4\346\2\0\1\346\11\0\3\347\10\0"+
    "\1\347\1\0\1\347\1\0\2\347\1\0\2\347\3\0"+
    "\1\347\23\0\1\347\3\0\1\347\3\0\1\347\2\0"+
    "\4\347\2\0\1\347\11\0\3\350\10\0\1\350\1\0"+
    "\1\350\1\0\2\350\1\0\2\350\3\0\1\350\23\0"+
    "\1\350\3\0\1\350\3\0\1\350\2\0\4\350\2\0"+
    "\1\350\11\0\3\351\10\0\1\351\1\0\1\351\1\0"+
    "\2\351\1\0\2\351\3\0\1\351\23\0\1\351\3\0"+
    "\1\351\3\0\1\351\2\0\4\351\2\0\1\351\11\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\2\13\1\352\10\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\3\13\1\353"+
    "\7\13\4\0\7\13\5\0\1\13\5\0\1\13\1\354"+
    "\1\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\2\13\1\355\10\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\5\13\1\356\5\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\3\13\1\357"+
    "\7\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\3\13\1\360\7\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\1\13\1\361\5\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\7\13\1\362\3\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\13\13\1\363"+
    "\1\0\1\364\1\0\7\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\13\13\4\0\1\365\6\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\366\3\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\1\13\1\367\11\13\4\0"+
    "\7\13\5\0\1\13\5\0\3\13\4\0\1\13\1\0"+
    "\2\13\1\145\5\13\1\0\1\13\22\0\10\13\1\370"+
    "\2\13\4\0\7\13\5\0\1\13\5\0\1\13\1\371"+
    "\1\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\372\3\13\4\0\7\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\1\373\4\13\1\0\1\13\22\0\13\13\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\3\13\1\374\7\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\1\375\4\13\1\0\1\13\22\0"+
    "\13\13\4\0\7\13\5\0\3\376\10\0\1\376\1\0"+
    "\1\376\1\0\2\376\1\0\2\376\3\0\1\376\23\0"+
    "\1\376\3\0\1\376\3\0\1\376\2\0\4\376\2\0"+
    "\1\376\11\0\3\377\10\0\1\377\1\0\1\377\1\0"+
    "\2\377\1\0\2\377\3\0\1\377\23\0\1\377\3\0"+
    "\1\377\3\0\1\377\2\0\4\377\2\0\1\377\11\0"+
    "\3\u0100\10\0\1\u0100\1\0\1\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\3\0\1\u0100\23\0\1\u0100\3\0\1\u0100\3\0"+
    "\1\u0100\2\0\4\u0100\2\0\1\u0100\11\0\3\u0101\10\0"+
    "\1\u0101\1\0\1\u0101\1\0\2\u0101\1\0\2\u0101\3\0"+
    "\1\u0101\23\0\1\u0101\3\0\1\u0101\3\0\1\u0101\2\0"+
    "\4\u0101\2\0\1\u0101\11\0\3\u0102\10\0\1\u0102\1\0"+
    "\1\u0102\1\0\2\u0102\1\0\2\u0102\3\0\1\u0102\23\0"+
    "\1\u0102\3\0\1\u0102\3\0\1\u0102\2\0\4\u0102\2\0"+
    "\1\u0102\11\0\3\u0103\10\0\1\u0103\1\0\1\u0103\1\0"+
    "\2\u0103\1\0\2\u0103\3\0\1\u0103\23\0\1\u0103\3\0"+
    "\1\u0103\3\0\1\u0103\2\0\4\u0103\2\0\1\u0103\11\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\13\13\4\0\1\u0104\6\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\2\13\1\u0105\10\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\1\u0106\4\13\1\0\1\13\22\0"+
    "\13\13\4\0\7\13\5\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\13\13\4\0\1\u0107\6\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\1\13\1\u0108\3\13"+
    "\1\0\1\13\22\0\13\13\4\0\7\13\5\0\1\13"+
    "\5\0\3\13\4\0\1\13\1\0\2\13\1\145\5\13"+
    "\1\0\1\13\22\0\13\13\4\0\1\u0109\6\13\74\0"+
    "\1\u010a\107\0\1\u010a\14\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\5\13\1\0\1\13\22\0"+
    "\13\13\4\0\3\13\1\u010b\3\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\13\13\4\0\2\13\1\u010c\4\13\5\0"+
    "\1\13\5\0\3\13\4\0\1\13\1\0\2\13\1\145"+
    "\5\13\1\0\1\13\22\0\12\13\1\u010d\4\0\7\13"+
    "\5\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\1\13\1\u010e\3\13\1\0\1\13\22\0\13\13"+
    "\4\0\7\13\5\0\1\13\5\0\3\13\4\0\1\13"+
    "\1\0\2\13\1\145\2\13\1\u010f\2\13\1\0\1\13"+
    "\22\0\13\13\4\0\7\13\5\0\3\u0110\10\0\1\u0110"+
    "\1\0\1\u0110\1\0\2\u0110\1\0\2\u0110\3\0\1\u0110"+
    "\23\0\1\u0110\3\0\1\u0110\3\0\1\u0110\2\0\4\u0110"+
    "\2\0\1\u0110\11\0\3\u0111\10\0\1\u0111\1\0\1\u0111"+
    "\1\0\2\u0111\1\0\2\u0111\3\0\1\u0111\23\0\1\u0111"+
    "\3\0\1\u0111\3\0\1\u0111\2\0\4\u0111\2\0\1\u0111"+
    "\11\0\1\13\5\0\3\13\4\0\1\13\1\0\2\13"+
    "\1\145\5\13\1\0\1\13\22\0\7\13\1\u0112\3\13"+
    "\4\0\7\13\5\0\1\13\5\0\1\13\1\u0113\1\13"+
    "\4\0\1\13\1\0\2\13\1\145\5\13\1\0\1\13"+
    "\22\0\13\13\4\0\7\13\5\0\1\13\5\0\3\13"+
    "\4\0\1\13\1\0\2\13\1\145\1\u0114\4\13\1\0"+
    "\1\13\22\0\13\13\4\0\7\13\5\0\1\13\5\0"+
    "\3\13\4\0\1\13\1\0\2\13\1\145\5\13\1\0"+
    "\1\13\22\0\7\13\1\u0115\3\13\4\0\7\13\5\0"+
    "\3\u0116\10\0\1\u0116\1\0\1\u0116\1\0\2\u0116\1\0"+
    "\2\u0116\3\0\1\u0116\23\0\1\u0116\3\0\1\u0116\3\0"+
    "\1\u0116\2\0\4\u0116\2\0\1\u0116\11\0\3\u0117\10\0"+
    "\1\u0117\1\0\1\u0117\1\0\2\u0117\1\0\2\u0117\3\0"+
    "\1\u0117\23\0\1\u0117\3\0\1\u0117\3\0\1\u0117\2\0"+
    "\4\u0117\2\0\1\u0117\11\0\1\13\5\0\3\13\4\0"+
    "\1\13\1\0\2\13\1\145\1\u0118\4\13\1\0\1\13"+
    "\22\0\13\13\4\0\7\13\5\0\3\u0119\10\0\1\u0119"+
    "\1\0\1\u0119\1\0\2\u0119\1\0\2\u0119\3\0\1\u0119"+
    "\23\0\1\u0119\3\0\1\u0119\3\0\1\u0119\2\0\4\u0119"+
    "\2\0\1\u0119\11\0\3\u011a\10\0\1\u011a\1\0\1\u011a"+
    "\1\0\2\u011a\1\0\2\u011a\3\0\1\u011a\23\0\1\u011a"+
    "\3\0\1\u011a\3\0\1\u011a\2\0\4\u011a\2\0\1\u011a"+
    "\11\0\3\u011b\10\0\1\u011b\1\0\1\u011b\1\0\2\u011b"+
    "\1\0\2\u011b\3\0\1\u011b\23\0\1\u011b\3\0\1\u011b"+
    "\3\0\1\u011b\2\0\4\u011b\2\0\1\u011b\11\0\3\u011c"+
    "\10\0\1\u011c\1\0\1\u011c\1\0\2\u011c\1\0\2\u011c"+
    "\3\0\1\u011c\23\0\1\u011c\3\0\1\u011c\3\0\1\u011c"+
    "\2\0\4\u011c\2\0\1\u011c\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\2\1\2\11\7\1\1\11"+
    "\10\1\2\11\1\1\12\11\14\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\2\11\3\1\7\11\1\1\4\11"+
    "\1\1\1\11\1\1\2\11\3\1\7\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\0\2\11\1\0\1\1\5\11"+
    "\1\1\1\11\4\1\10\11\30\1\2\0\2\1\3\0"+
    "\2\11\1\1\1\0\2\11\35\1\1\11\1\1\2\0"+
    "\1\11\1\1\2\0\34\1\2\0\1\1\2\0\11\1"+
    "\2\0\12\1\1\11\1\0\1\1\1\11\1\0\6\1"+
    "\1\11\20\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private String token;
	private StringBuffer stringConstant = new StringBuffer();
	private int characterSize;
	private int integerSize;
	private float floatConstant;
	private double doubleConstant;
	private CharacterType characterType;
	
	public String getToken() {
		return token;
	}
	
    public int getLine() {
        return yyline + 1;
    }
	
	public int getColumn() {
		return yycolumn + 1;
	}
	
	public int getCharacterSize() {
		return characterSize;
	}
	
	public CharacterType getCharacterType() {
		return characterType;
	}
	
	public int getIntegerSize() {
		return integerSize;
	}

	public double getFloatConstant() {
		return floatConstant;
	}
	
	public double getDoubleConstant() {
		return doubleConstant;
	}
	
	private int CharArrToInt(String ch) {
		int intConst = 0;
		for (int i=0; i<Math.min(32/characterSize, ch.length()); i++) {
			intConst *=256;
			intConst += ch.charAt(i);
		}
		return (char)intConst;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScannerSymbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return ScannerSymbol.EOF;
            }
            case 285: break;
            case STRING: {
              stringConstant.append((char)0); yybegin(YYINITIAL); return ScannerSymbol.StringMissingEndIndicator;
            }
            case 286: break;
            case CHARACTER: {
              yybegin(YYINITIAL); return ScannerSymbol.CharacterMissingEndIndicator;
            }
            case 287: break;
            case SINGLE_LINE_COMMENT: {
              yybegin(YYINITIAL); return ScannerSymbol.Comment;
            }
            case 288: break;
            case COMMENT_BLOCK: {
              yybegin(YYINITIAL); return ScannerSymbol.CommentBlockEndIndicatorMissing;
            }
            case 289: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ScannerSymbol.InvalidToken;
            }
          case 125: break;
          case 2: 
            { 
            }
          case 126: break;
          case 3: 
            { token = yytext(); return ScannerSymbol.Identifier;
            }
          case 127: break;
          case 4: 
            { token = yytext();
		if (token.length() > 20)
			return ScannerSymbol.IntegerConstantTooLong;
		if (token.length() > 19 || Long.parseLong(token) > ((long)1)<<IntegerSize.LongSize)
			integerSize = IntegerSize.LongLongSize; 
		else if (Long.parseLong(token) <= ((long)1)<<IntegerSize.IntSize) 
			integerSize = IntegerSize.IntSize;
		else 
			integerSize = IntegerSize.LongSize; 
		return ScannerSymbol.IntegerConstant;
            }
          case 128: break;
          case 5: 
            { characterType = CharacterType.none; characterSize = 8; stringConstant.setLength(0); yybegin(STRING);
            }
          case 129: break;
          case 6: 
            { characterType = CharacterType.none; characterSize = 8; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 130: break;
          case 7: 
            { return ScannerSymbol.Mode;
            }
          case 131: break;
          case 8: 
            { return ScannerSymbol.BitwiseAnd;
            }
          case 132: break;
          case 9: 
            { return ScannerSymbol.Dot;
            }
          case 133: break;
          case 10: 
            { return ScannerSymbol.Sub;
            }
          case 134: break;
          case 11: 
            { return ScannerSymbol.Colon;
            }
          case 135: break;
          case 12: 
            { return ScannerSymbol.Assignment;
            }
          case 136: break;
          case 13: 
            { return ScannerSymbol.LogicalNot;
            }
          case 137: break;
          case 14: 
            { return ScannerSymbol.Greater;
            }
          case 138: break;
          case 15: 
            { return ScannerSymbol.Less;
            }
          case 139: break;
          case 16: 
            { return ScannerSymbol.BitwiseOr;
            }
          case 140: break;
          case 17: 
            { return ScannerSymbol.BitwiseNot;
            }
          case 141: break;
          case 18: 
            { return ScannerSymbol.BitwiseXor;
            }
          case 142: break;
          case 19: 
            { return ScannerSymbol.Add;
            }
          case 143: break;
          case 20: 
            { return ScannerSymbol.Multiplication;
            }
          case 144: break;
          case 21: 
            { return ScannerSymbol.Division;
            }
          case 145: break;
          case 22: 
            { return ScannerSymbol.Comma;
            }
          case 146: break;
          case 23: 
            { return ScannerSymbol.SemiColon;
            }
          case 147: break;
          case 24: 
            { return ScannerSymbol.CurlyBraceOpen;
            }
          case 148: break;
          case 25: 
            { return ScannerSymbol.CurlyBraceClose;
            }
          case 149: break;
          case 26: 
            { return ScannerSymbol.ParenthesisOpen;
            }
          case 150: break;
          case 27: 
            { return ScannerSymbol.ParenthesisClose;
            }
          case 151: break;
          case 28: 
            { return ScannerSymbol.BracketOpen;
            }
          case 152: break;
          case 29: 
            { return ScannerSymbol.BracketClose;
            }
          case 153: break;
          case 30: 
            { stringConstant.append(yytext());
            }
          case 154: break;
          case 31: 
            { yybegin(YYINITIAL); return ScannerSymbol.StringMissingEndIndicator;
            }
          case 155: break;
          case 32: 
            { token = stringConstant.toString(); 
		yybegin(YYINITIAL); 
		if (characterType != CharacterType.none && characterType != CharacterType.L)
			for (int i = 0; i < token.length(); i++) {
				long max = ((long)1)<<characterSize;
				if (Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(i))) >= max)
					return ScannerSymbol.InvalidCharacter;
			}
		return ScannerSymbol.StringConstant;
            }
          case 156: break;
          case 33: 
            { yybegin(STRING_ESCAPE_SEQUENCE);
            }
          case 157: break;
          case 34: 
            { yybegin(STRING); return ScannerSymbol.InvalidEscapeSequence;
            }
          case 158: break;
          case 35: 
            { yybegin(STRING);
            }
          case 159: break;
          case 36: 
            { int tempCharacter = Integer.parseInt(yytext(),8);
		yybegin(STRING); 
		stringConstant.append((char)tempCharacter);
            }
          case 160: break;
          case 37: 
            { yybegin(STRING); return ScannerSymbol.InvalidOctalCharacterLiteral;
            }
          case 161: break;
          case 38: 
            { stringConstant.append(yytext()); yybegin(STRING);
            }
          case 162: break;
          case 39: 
            { yybegin(STRING); return ScannerSymbol.InvalidHexadecimalCharacterLiteral;
            }
          case 163: break;
          case 40: 
            { yybegin(STRING); return ScannerSymbol.InvalidUniversalUnicodeCharacterLiteral;
            }
          case 164: break;
          case 41: 
            { stringConstant.append("\b"); yybegin(STRING);
            }
          case 165: break;
          case 42: 
            { stringConstant.append("\r"); yybegin(STRING);
            }
          case 166: break;
          case 43: 
            { stringConstant.append((char)7); yybegin(STRING);
            }
          case 167: break;
          case 44: 
            { stringConstant.append("\t"); yybegin(STRING);
            }
          case 168: break;
          case 45: 
            { stringConstant.append("\n"); yybegin(STRING);
            }
          case 169: break;
          case 46: 
            { stringConstant.append("\f"); yybegin(STRING);
            }
          case 170: break;
          case 47: 
            { stringConstant.append((char)11); yybegin(STRING);
            }
          case 171: break;
          case 48: 
            { yybegin(YYINITIAL); return ScannerSymbol.CharacterMissingEndIndicator;
            }
          case 172: break;
          case 49: 
            { yybegin(CHARACTER_ESCAPE_SEQUENCE);
            }
          case 173: break;
          case 50: 
            { token = stringConstant.toString();
		yybegin(YYINITIAL); 
		if (token.length()>4)
			return ScannerSymbol.CharacterTooLong; 
		if (token.length()==1)
		{
			if ((characterType != CharacterType.L && characterType != CharacterType.none) && Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(0))) >= ((long)1)<<characterSize)
				return ScannerSymbol.InvalidCharacter;
			return ScannerSymbol.CharacterConstant; 
		} else {
			if (characterType != CharacterType.none && characterType != CharacterType.L)
				return ScannerSymbol.InvalidCharacter;
				
			for (int i = 0; i < token.length(); i++)
				if (Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(i))) >= ((long)1)<<characterSize)
					return ScannerSymbol.InvalidCharacter;
			token = ""+CharArrToInt(token);
			integerSize = IntegerSize.IntSize;
			return ScannerSymbol.IntegerConstant;
		}
            }
          case 174: break;
          case 51: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidEscapeSequence;
            }
          case 175: break;
          case 52: 
            { yybegin(CHARACTER);
            }
          case 176: break;
          case 53: 
            { int tempCharacter = Integer.parseInt(yytext(),8);
		yybegin(CHARACTER); 
		stringConstant.append((char)tempCharacter);
            }
          case 177: break;
          case 54: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidOctalCharacterLiteral;
            }
          case 178: break;
          case 55: 
            { stringConstant.append(yytext()); yybegin(CHARACTER);
            }
          case 179: break;
          case 56: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidHexadecimalCharacterLiteral;
            }
          case 180: break;
          case 57: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidUniversalUnicodeCharacterLiteral;
            }
          case 181: break;
          case 58: 
            { stringConstant.append("\b"); yybegin(CHARACTER);
            }
          case 182: break;
          case 59: 
            { stringConstant.append("\r"); yybegin(CHARACTER);
            }
          case 183: break;
          case 60: 
            { stringConstant.append((char)7); yybegin(CHARACTER);
            }
          case 184: break;
          case 61: 
            { stringConstant.append("\t"); yybegin(CHARACTER);
            }
          case 185: break;
          case 62: 
            { stringConstant.append("\n"); yybegin(CHARACTER);
            }
          case 186: break;
          case 63: 
            { stringConstant.append("\f"); yybegin(CHARACTER);
            }
          case 187: break;
          case 64: 
            { stringConstant.append((char)11); yybegin(CHARACTER);
            }
          case 188: break;
          case 65: 
            { token = yytext();
            }
          case 189: break;
          case 66: 
            { yybegin(YYINITIAL); return ScannerSymbol.Comment;
            }
          case 190: break;
          case 67: 
            { token += yytext();
            }
          case 191: break;
          case 68: 
            { token = yytext(); doubleConstant = Double.parseDouble(token); return ScannerSymbol.DoubleConstant;
            }
          case 192: break;
          case 69: 
            { characterType = CharacterType.u; characterSize = 16; stringConstant.setLength(0); yybegin(STRING);
            }
          case 193: break;
          case 70: 
            { characterType = CharacterType.u; characterSize = 16; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 194: break;
          case 71: 
            { characterType = CharacterType.U; characterSize = 32; stringConstant.setLength(0); yybegin(STRING);
            }
          case 195: break;
          case 72: 
            { characterType = CharacterType.U; characterSize = 32; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 196: break;
          case 73: 
            { yybegin(SINGLE_LINE_COMMENT); token = "";
            }
          case 197: break;
          case 74: 
            { yybegin(COMMENT_BLOCK); token = "";
            }
          case 198: break;
          case 75: 
            { return ScannerSymbol.LogicalAnd;
            }
          case 199: break;
          case 76: 
            { token = yytext();
		return ScannerSymbol.InvalidHexadecimalIntegerConstant;
            }
          case 200: break;
          case 77: 
            { return ScannerSymbol.Decrement;
            }
          case 201: break;
          case 78: 
            { return ScannerSymbol.Do;
            }
          case 202: break;
          case 79: 
            { characterType = CharacterType.L; characterSize = 32; stringConstant.setLength(0); yybegin(STRING);
            }
          case 203: break;
          case 80: 
            { characterType = CharacterType.L; characterSize = 32; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 204: break;
          case 81: 
            { return ScannerSymbol.Equal;
            }
          case 205: break;
          case 82: 
            { return ScannerSymbol.NotEqual;
            }
          case 206: break;
          case 83: 
            { return ScannerSymbol.GreaterEqual;
            }
          case 207: break;
          case 84: 
            { return ScannerSymbol.LessEqual;
            }
          case 208: break;
          case 85: 
            { return ScannerSymbol.LogicalOr;
            }
          case 209: break;
          case 86: 
            { return ScannerSymbol.Increment;
            }
          case 210: break;
          case 87: 
            { return ScannerSymbol.If;
            }
          case 211: break;
          case 88: 
            { stringConstant.append((char)Integer.parseInt(yytext().substring(1),16)); yybegin(STRING);
            }
          case 212: break;
          case 89: 
            { stringConstant.append((char)Integer.parseInt(yytext().substring(1),16)); yybegin(CHARACTER);
            }
          case 213: break;
          case 90: 
            { token = yytext(); floatConstant = Float.parseFloat(token); return ScannerSymbol.FloatConstant;
            }
          case 214: break;
          case 91: 
            { characterType = CharacterType.u8; characterSize = 8; stringConstant.setLength(0); yybegin(STRING);
            }
          case 215: break;
          case 92: 
            { characterType = CharacterType.u8; characterSize = 8; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 216: break;
          case 93: 
            { token = yytext();
		if ((token.length() - 2)*4 > IntegerSize.LongLongSize)
			return ScannerSymbol.IntegerConstantTooLong;
		if ((token.length() - 2)*4 > IntegerSize.LongSize)
			integerSize = IntegerSize.LongLongSize; 
		else if ((token.length() - 2)*4 <= IntegerSize.IntSize) 
			integerSize = IntegerSize.IntSize;
		else 
			integerSize = IntegerSize.LongSize; 
		return ScannerSymbol.IntegerConstant;
            }
          case 217: break;
          case 94: 
            { return ScannerSymbol.Int;
            }
          case 218: break;
          case 95: 
            { return ScannerSymbol.For;
            }
          case 219: break;
          case 96: 
            { return ScannerSymbol.Else;
            }
          case 220: break;
          case 97: 
            { return ScannerSymbol.Bool;
            }
          case 221: break;
          case 98: 
            { return ScannerSymbol.Byte;
            }
          case 222: break;
          case 99: 
            { return ScannerSymbol.Long;
            }
          case 223: break;
          case 100: 
            { return ScannerSymbol.True;
            }
          case 224: break;
          case 101: 
            { return ScannerSymbol.Case;
            }
          case 225: break;
          case 102: 
            { return ScannerSymbol.Char;
            }
          case 226: break;
          case 103: 
            { return ScannerSymbol.Goto;
            }
          case 227: break;
          case 104: 
            { return ScannerSymbol.Void;
            }
          case 228: break;
          case 105: 
            { return ScannerSymbol.Until;
            }
          case 229: break;
          case 106: 
            { return ScannerSymbol.Break;
            }
          case 230: break;
          case 107: 
            { return ScannerSymbol.Const;
            }
          case 231: break;
          case 108: 
            { return ScannerSymbol.Short;
            }
          case 232: break;
          case 109: 
            { return ScannerSymbol.Float;
            }
          case 233: break;
          case 110: 
            { return ScannerSymbol.False;
            }
          case 234: break;
          case 111: 
            { return ScannerSymbol.While;
            }
          case 235: break;
          case 112: 
            { long num = Long.parseLong(yytext().substring(1),16);
		yybegin(STRING);
		stringConstant.append((char)num);
            }
          case 236: break;
          case 113: 
            { long num = Long.parseLong(yytext().substring(1),16);
		yybegin(CHARACTER);
		stringConstant.append((char)num);
            }
          case 237: break;
          case 114: 
            { return ScannerSymbol.Extern;
            }
          case 238: break;
          case 115: 
            { return ScannerSymbol.Double;
            }
          case 239: break;
          case 116: 
            { return ScannerSymbol.Return;
            }
          case 240: break;
          case 117: 
            { return ScannerSymbol.Record;
            }
          case 241: break;
          case 118: 
            { return ScannerSymbol.String;
            }
          case 242: break;
          case 119: 
            { return ScannerSymbol.Sizeof;
            }
          case 243: break;
          case 120: 
            { return ScannerSymbol.Switch;
            }
          case 244: break;
          case 121: 
            { return ScannerSymbol.Default;
            }
          case 245: break;
          case 122: 
            { return ScannerSymbol.Include;
            }
          case 246: break;
          case 123: 
            { return ScannerSymbol.Wchar;
            }
          case 247: break;
          case 124: 
            { return ScannerSymbol.Continue;
            }
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
