/* The following code was generated by JFlex 1.6.1 */

/*todo:
*1- delimeter
*/

package scanner;

import scanner.ScannerSymbol;
import scanner.IntegerSize;
import scanner.RealNumberSize;
import scanner.CharacterType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>F:/java/Compiler/src/Scanner/Lexer.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRING_ESCAPE_SEQUENCE = 4;
  public static final int CHARACTER = 6;
  public static final int CHARACTER_ESCAPE_SEQUENCE = 8;
  public static final int SINGLE_LINE_COMMENT = 10;
  public static final int COMMENT_BLOCK = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\31\1\7\2\0"+
    "\1\15\1\16\1\11\1\47\1\50\1\40\1\37\1\42\1\22\1\20"+
    "\1\41\1\17\1\67\1\72\1\71\2\5\1\70\1\5\1\26\1\6"+
    "\1\43\1\44\1\33\1\30\1\32\1\103\1\0\4\4\1\21\1\23"+
    "\5\24\1\27\10\24\1\14\5\24\1\51\1\10\1\52\1\36\1\25"+
    "\1\0\1\60\1\53\1\64\1\75\1\57\1\76\1\77\1\66\1\74"+
    "\1\24\1\61\1\55\1\24\1\73\1\54\2\24\1\56\1\65\1\63"+
    "\1\13\1\102\1\101\1\12\1\62\1\100\1\45\1\34\1\46\1\35"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\2\3"+
    "\1\7\1\10\1\4\1\11\1\12\1\1\1\3\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\15\3\1\36\1\37\1\40\1\41\1\42"+
    "\2\43\1\44\1\45\1\46\1\47\2\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\36\1\60\1\61"+
    "\1\62\1\63\2\64\1\65\1\66\1\67\1\70\2\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\2\102\3\103\1\0\1\104\1\0\1\105\1\106\2\3"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\20\3"+
    "\1\126\1\127\10\3\1\44\1\130\2\0\1\65\1\131"+
    "\2\0\1\132\1\104\1\0\1\133\1\134\1\3\1\135"+
    "\20\3\1\136\3\3\1\137\6\3\1\44\1\130\2\0"+
    "\1\65\1\131\2\0\1\3\1\140\1\3\1\141\1\142"+
    "\3\3\1\143\1\144\2\3\1\145\1\146\11\3\1\147"+
    "\2\3\1\150\1\130\2\0\1\131\2\0\1\151\1\152"+
    "\4\3\1\153\3\3\1\154\5\3\1\155\1\156\1\3"+
    "\1\157\1\130\1\160\1\0\1\131\1\161\1\0\1\162"+
    "\1\163\1\164\1\3\1\146\1\165\1\166\1\167\1\3"+
    "\1\170\1\3\1\0\1\130\1\131\1\3\1\171\1\172"+
    "\1\173\1\130\1\131\1\174\1\130\1\131\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u01dc\0\u0264\0\u02a8\0\u01dc\0\u01dc\0\u02ec\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u0264\0\u04c8\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\u061c\0\u01dc\0\u01dc\0\u0660\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u01dc\0\u0a5c\0\u01dc\0\u01dc\0\u0aa0\0\u01dc\0\u0ae4\0\u01dc"+
    "\0\u01dc\0\u0b28\0\u0b6c\0\u0bb0\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u0bf4\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u0c38\0\u01dc\0\u0c7c\0\u01dc\0\u01dc\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u0d8c"+
    "\0\u0dd0\0\u01dc\0\u0e14\0\u01dc\0\u0e58\0\u0264\0\u0e9c\0\u0ee0"+
    "\0\u01dc\0\u01dc\0\u0f24\0\u0f68\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u0fac\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u0264\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u01dc\0\u18b4\0\u18f8"+
    "\0\u01dc\0\u01dc\0\u193c\0\u0fac\0\u1980\0\u19c4\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c"+
    "\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u0264\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u0264\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u01dc"+
    "\0\u2024\0\u2068\0\u20ac\0\u01dc\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u0264\0\u2200\0\u0264\0\u0264\0\u2244\0\u2288\0\u22cc\0\u0264"+
    "\0\u0264\0\u2310\0\u2354\0\u0264\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u0264\0\u2640"+
    "\0\u2684\0\u0264\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u0264\0\u0264\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u0264\0\u2970"+
    "\0\u29b4\0\u29f8\0\u0264\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u0264\0\u0264\0\u2b90\0\u0264\0\u2bd4\0\u01dc\0\u0b6c\0\u2c18"+
    "\0\u01dc\0\u0d04\0\u0264\0\u0264\0\u0264\0\u2c5c\0\u0264\0\u0264"+
    "\0\u0264\0\u0264\0\u2ca0\0\u0264\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u0264\0\u0264\0\u0264\0\u2e38\0\u2e7c\0\u0264\0\u2ec0"+
    "\0\u2f04\0\u01dc\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\2\14\1\15\1\10\1\16"+
    "\1\13\1\17\1\20\1\21\1\22\1\23\1\24\1\13"+
    "\1\25\2\13\1\26\1\14\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\13\1\54\1\55\1\56\3\13\1\57\1\60"+
    "\1\61\1\13\4\14\1\13\1\62\1\63\1\64\1\65"+
    "\1\13\1\66\1\67\1\10\1\70\2\71\4\70\1\72"+
    "\1\73\73\70\1\74\1\75\1\76\2\74\1\77\1\100"+
    "\3\101\1\102\1\103\1\104\2\74\1\77\6\74\1\100"+
    "\24\74\1\105\2\74\1\106\1\74\1\107\2\74\1\110"+
    "\3\74\4\77\1\111\2\74\1\112\3\74\1\113\1\101"+
    "\1\114\2\115\5\114\1\116\1\117\72\114\1\120\1\121"+
    "\1\122\2\120\1\123\1\124\1\120\2\125\1\126\1\127"+
    "\1\130\2\120\1\123\6\120\1\124\24\120\1\131\2\120"+
    "\1\132\1\120\1\133\2\120\1\134\3\120\4\123\1\135"+
    "\2\120\1\136\3\120\1\137\1\125\1\140\1\141\1\142"+
    "\101\140\15\143\1\144\1\145\65\143\106\0\1\12\105\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\30\13\6\0\2\14\10\0"+
    "\1\14\1\147\1\150\4\0\1\14\30\0\1\150\7\0"+
    "\4\14\15\0\3\13\1\151\1\0\1\152\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\1\153\1\13"+
    "\23\0\20\13\1\154\7\13\5\0\3\13\1\155\1\0"+
    "\1\156\3\13\2\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\146\2\13\23\0\30\13\16\0\1\157\1\160\103\0"+
    "\1\161\72\0\2\14\3\0\1\162\4\0\1\14\1\147"+
    "\1\150\4\0\1\14\30\0\1\150\7\0\4\14\16\0"+
    "\2\147\10\0\1\147\6\0\1\147\40\0\4\147\33\0"+
    "\1\163\65\0\3\13\1\164\1\0\1\165\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\30\13\31\0\1\166\103\0\1\167\103\0\1\170\103\0"+
    "\1\171\107\0\1\172\106\0\1\173\50\0\3\13\3\0"+
    "\3\13\2\0\1\13\1\0\1\13\1\0\2\13\1\146"+
    "\2\13\23\0\1\13\1\174\1\13\1\175\3\13\1\176"+
    "\20\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\1\13\1\177"+
    "\26\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\4\13\1\200"+
    "\23\13\5\0\3\13\3\0\1\201\2\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\2\13"+
    "\1\202\25\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\3\13"+
    "\1\203\24\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\1\13"+
    "\1\204\3\13\1\205\5\13\1\206\14\13\5\0\3\13"+
    "\3\0\3\13\2\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\146\2\13\23\0\10\13\1\207\2\13\1\210\5\13"+
    "\1\211\4\13\1\212\1\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\20\13\1\213\2\13\1\214\4\13\5\0\3\13"+
    "\3\0\3\13\2\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\146\2\13\23\0\1\13\1\215\2\13\1\216\23\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\1\13\1\217\1\220"+
    "\2\13\1\221\22\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\1\13\1\222\26\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\11\13\1\223\1\13\1\224\14\13\5\0\3\13\3\0"+
    "\3\13\2\0\1\13\1\0\1\13\1\0\2\13\1\146"+
    "\2\13\23\0\1\13\1\225\26\13\1\0\1\70\2\0"+
    "\4\70\2\0\73\70\7\0\1\12\76\0\1\76\106\0"+
    "\1\226\11\0\1\226\47\0\4\226\15\0\3\227\10\0"+
    "\1\227\1\0\1\227\1\0\1\227\2\0\1\227\24\0"+
    "\1\227\3\0\2\227\3\0\1\227\2\0\4\227\2\0"+
    "\2\227\11\0\3\230\10\0\1\230\1\0\1\230\1\0"+
    "\1\230\2\0\1\230\24\0\1\230\3\0\2\230\3\0"+
    "\1\230\2\0\4\230\2\0\2\230\11\0\3\231\10\0"+
    "\1\231\1\0\1\231\1\0\1\231\2\0\1\231\24\0"+
    "\1\231\3\0\2\231\3\0\1\231\2\0\4\231\2\0"+
    "\2\231\5\0\1\114\2\0\5\114\2\0\72\114\2\0"+
    "\1\122\106\0\1\232\11\0\1\232\47\0\4\232\15\0"+
    "\3\233\10\0\1\233\1\0\1\233\1\0\1\233\2\0"+
    "\1\233\24\0\1\233\3\0\2\233\3\0\1\233\2\0"+
    "\4\233\2\0\2\233\11\0\3\234\10\0\1\234\1\0"+
    "\1\234\1\0\1\234\2\0\1\234\24\0\1\234\3\0"+
    "\2\234\3\0\1\234\2\0\4\234\2\0\2\234\11\0"+
    "\3\235\10\0\1\235\1\0\1\235\1\0\1\235\2\0"+
    "\1\235\24\0\1\235\3\0\2\235\3\0\1\235\2\0"+
    "\4\235\2\0\2\235\5\0\1\140\2\0\101\140\2\0"+
    "\1\142\101\0\15\143\2\0\65\143\15\0\1\142\73\0"+
    "\2\147\10\0\1\147\1\0\1\150\1\0\1\236\2\0"+
    "\1\147\30\0\1\150\7\0\4\147\3\0\1\236\12\0"+
    "\2\237\10\0\1\237\2\0\1\240\3\0\1\237\10\0"+
    "\1\240\27\0\4\237\15\0\3\13\1\241\1\0\1\242"+
    "\3\13\2\0\1\13\1\0\1\13\1\0\2\13\1\146"+
    "\2\13\23\0\30\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\10\13\1\243\17\13\5\0\3\244\10\0\1\244\1\0"+
    "\1\244\1\0\1\244\2\0\1\244\24\0\1\244\3\0"+
    "\2\244\3\0\1\244\2\0\4\244\2\0\2\244\11\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\1\13\1\245\26\13\5\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\4\13\1\246\23\13\5\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\10\13\1\247\17\13\5\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\20\13\1\250\7\13\5\0"+
    "\3\13\3\0\3\13\2\0\1\13\1\0\1\13\1\0"+
    "\2\13\1\146\2\13\23\0\10\13\1\251\1\252\16\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\10\13\1\253\17\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\12\13\1\254\15\13"+
    "\5\0\3\13\3\0\1\13\1\255\1\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\30\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\20\13\1\256\7\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\12\13\1\257\15\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\5\13\1\260\22\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\3\13\1\261\24\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\1\13\1\262\26\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\25\13\1\263\2\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\21\13\1\264\6\13"+
    "\5\0\3\13\3\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\13\1\146\2\13\23\0\10\13\1\265\1\266"+
    "\16\13\5\0\3\13\3\0\1\13\1\267\1\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\30\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\23\13\1\270"+
    "\4\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\3\13\1\271"+
    "\24\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\1\13\1\272"+
    "\26\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\2\13\1\273"+
    "\25\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\10\13\1\274"+
    "\17\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\13\13\1\275"+
    "\14\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\21\13\1\276"+
    "\6\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\21\13\1\277"+
    "\6\13\6\0\1\300\11\0\1\300\47\0\4\300\15\0"+
    "\3\301\10\0\1\301\1\0\1\301\1\0\1\301\2\0"+
    "\1\301\24\0\1\301\3\0\2\301\3\0\1\301\2\0"+
    "\4\301\2\0\2\301\11\0\3\302\10\0\1\302\1\0"+
    "\1\302\1\0\1\302\2\0\1\302\24\0\1\302\3\0"+
    "\2\302\3\0\1\302\2\0\4\302\2\0\2\302\11\0"+
    "\3\303\10\0\1\303\1\0\1\303\1\0\1\303\2\0"+
    "\1\303\24\0\1\303\3\0\2\303\3\0\1\303\2\0"+
    "\4\303\2\0\2\303\12\0\1\304\11\0\1\304\47\0"+
    "\4\304\15\0\3\305\10\0\1\305\1\0\1\305\1\0"+
    "\1\305\2\0\1\305\24\0\1\305\3\0\2\305\3\0"+
    "\1\305\2\0\4\305\2\0\2\305\11\0\3\306\10\0"+
    "\1\306\1\0\1\306\1\0\1\306\2\0\1\306\24\0"+
    "\1\306\3\0\2\306\3\0\1\306\2\0\4\306\2\0"+
    "\2\306\11\0\3\307\10\0\1\307\1\0\1\307\1\0"+
    "\1\307\2\0\1\307\24\0\1\307\3\0\2\307\3\0"+
    "\1\307\2\0\4\307\2\0\2\307\12\0\2\237\10\0"+
    "\1\237\3\0\1\236\2\0\1\237\40\0\4\237\3\0"+
    "\1\236\12\0\2\237\10\0\1\237\6\0\1\237\40\0"+
    "\4\237\15\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\21\13\1\310"+
    "\6\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\2\13\1\311"+
    "\25\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\5\13\1\312"+
    "\22\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\4\13\1\313"+
    "\23\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\24\13\1\314"+
    "\3\13\5\0\3\13\3\0\1\13\1\315\1\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\30\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\1\13\1\316"+
    "\26\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\4\13\1\317"+
    "\23\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\4\13\1\320"+
    "\23\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\4\13\1\321"+
    "\23\13\5\0\3\13\3\0\3\13\2\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\146\2\13\23\0\10\13\1\322"+
    "\1\13\1\323\15\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\4\13\1\324\23\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\3\13\1\325\24\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\21\13\1\326\6\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\3\13\1\327\24\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\4\13\1\330\23\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\10\13\1\331\17\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\2\13\1\332\25\13\5\0\3\13\3\0\3\13\2\0"+
    "\1\13\1\0\1\13\1\0\2\13\1\146\2\13\23\0"+
    "\1\333\27\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\5\13"+
    "\1\334\22\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\5\13"+
    "\1\335\22\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\12\13"+
    "\1\336\15\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\1\13"+
    "\1\337\26\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\5\13"+
    "\1\340\22\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\2\13"+
    "\1\341\25\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\22\13"+
    "\1\342\5\13\5\0\3\343\10\0\1\343\1\0\1\343"+
    "\1\0\1\343\2\0\1\343\24\0\1\343\3\0\2\343"+
    "\3\0\1\343\2\0\4\343\2\0\2\343\11\0\3\344"+
    "\10\0\1\344\1\0\1\344\1\0\1\344\2\0\1\344"+
    "\24\0\1\344\3\0\2\344\3\0\1\344\2\0\4\344"+
    "\2\0\2\344\11\0\3\345\10\0\1\345\1\0\1\345"+
    "\1\0\1\345\2\0\1\345\24\0\1\345\3\0\2\345"+
    "\3\0\1\345\2\0\4\345\2\0\2\345\11\0\3\346"+
    "\10\0\1\346\1\0\1\346\1\0\1\346\2\0\1\346"+
    "\24\0\1\346\3\0\2\346\3\0\1\346\2\0\4\346"+
    "\2\0\2\346\11\0\3\347\10\0\1\347\1\0\1\347"+
    "\1\0\1\347\2\0\1\347\24\0\1\347\3\0\2\347"+
    "\3\0\1\347\2\0\4\347\2\0\2\347\11\0\3\350"+
    "\10\0\1\350\1\0\1\350\1\0\1\350\2\0\1\350"+
    "\24\0\1\350\3\0\2\350\3\0\1\350\2\0\4\350"+
    "\2\0\2\350\11\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\2\13"+
    "\1\351\25\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\6\13"+
    "\1\352\21\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\3\13"+
    "\1\353\24\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\3\13"+
    "\1\354\24\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\3\13"+
    "\1\355\24\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\21\13"+
    "\1\356\6\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\10\13"+
    "\1\357\17\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\14\13"+
    "\1\360\1\13\1\361\11\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\20\13\1\362\7\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\10\13\1\363\17\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\1\13\1\364\26\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\11\13\1\365\16\13\5\0\3\13\3\0\1\13"+
    "\1\366\1\13\2\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\146\2\13\23\0\30\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\2\13\1\367\25\13\5\0\3\13\3\0\1\13"+
    "\1\370\1\13\2\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\146\2\13\23\0\30\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\10\13\1\371\17\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\4\13\1\372\23\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\3\13\1\373\24\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\4\13\1\374\23\13\5\0\3\375\10\0\1\375"+
    "\1\0\1\375\1\0\1\375\2\0\1\375\24\0\1\375"+
    "\3\0\2\375\3\0\1\375\2\0\4\375\2\0\2\375"+
    "\11\0\3\376\10\0\1\376\1\0\1\376\1\0\1\376"+
    "\2\0\1\376\24\0\1\376\3\0\2\376\3\0\1\376"+
    "\2\0\4\376\2\0\2\376\11\0\3\377\10\0\1\377"+
    "\1\0\1\377\1\0\1\377\2\0\1\377\24\0\1\377"+
    "\3\0\2\377\3\0\1\377\2\0\4\377\2\0\2\377"+
    "\11\0\3\u0100\10\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\2\0\1\u0100\24\0\1\u0100\3\0\2\u0100\3\0\1\u0100"+
    "\2\0\4\u0100\2\0\2\u0100\11\0\3\u0101\10\0\1\u0101"+
    "\1\0\1\u0101\1\0\1\u0101\2\0\1\u0101\24\0\1\u0101"+
    "\3\0\2\u0101\3\0\1\u0101\2\0\4\u0101\2\0\2\u0101"+
    "\11\0\3\u0102\10\0\1\u0102\1\0\1\u0102\1\0\1\u0102"+
    "\2\0\1\u0102\24\0\1\u0102\3\0\2\u0102\3\0\1\u0102"+
    "\2\0\4\u0102\2\0\2\u0102\11\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\20\13\1\u0103\7\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\22\13\1\u0104\5\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\20\13\1\u0105\7\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\20\13\1\u0106\7\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\15\13\1\u0107\12\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\17\13\1\u0107\10\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\24\13\1\u0108\3\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\23\13\1\u0109\4\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\13\13\1\u010a\14\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\22\13\1\u010b\5\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\4\13\1\u010c\23\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\2\13\1\u010d\25\13\5\0\3\13\3\0\3\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\u010e\2\13"+
    "\23\0\30\13\5\0\3\u010f\10\0\1\u010f\1\0\1\u010f"+
    "\1\0\1\u010f\2\0\1\u010f\24\0\1\u010f\3\0\2\u010f"+
    "\3\0\1\u010f\2\0\4\u010f\2\0\2\u010f\11\0\3\u0110"+
    "\10\0\1\u0110\1\0\1\u0110\1\0\1\u0110\2\0\1\u0110"+
    "\24\0\1\u0110\3\0\2\u0110\3\0\1\u0110\2\0\4\u0110"+
    "\2\0\2\u0110\11\0\3\13\3\0\1\13\1\u0111\1\13"+
    "\2\0\1\13\1\0\1\13\1\0\2\13\1\146\2\13"+
    "\23\0\30\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\4\13"+
    "\1\u0112\23\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\10\13"+
    "\1\u0113\17\13\5\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\10\13"+
    "\1\u0114\17\13\5\0\3\u0115\10\0\1\u0115\1\0\1\u0115"+
    "\1\0\1\u0115\2\0\1\u0115\24\0\1\u0115\3\0\2\u0115"+
    "\3\0\1\u0115\2\0\4\u0115\2\0\2\u0115\11\0\3\u0116"+
    "\10\0\1\u0116\1\0\1\u0116\1\0\1\u0116\2\0\1\u0116"+
    "\24\0\1\u0116\3\0\2\u0116\3\0\1\u0116\2\0\4\u0116"+
    "\2\0\2\u0116\11\0\3\13\3\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\146\2\13\23\0\4\13"+
    "\1\u0117\23\13\5\0\3\u0118\10\0\1\u0118\1\0\1\u0118"+
    "\1\0\1\u0118\2\0\1\u0118\24\0\1\u0118\3\0\2\u0118"+
    "\3\0\1\u0118\2\0\4\u0118\2\0\2\u0118\11\0\3\u0119"+
    "\10\0\1\u0119\1\0\1\u0119\1\0\1\u0119\2\0\1\u0119"+
    "\24\0\1\u0119\3\0\2\u0119\3\0\1\u0119\2\0\4\u0119"+
    "\2\0\2\u0119\11\0\3\u011a\10\0\1\u011a\1\0\1\u011a"+
    "\1\0\1\u011a\2\0\1\u011a\24\0\1\u011a\3\0\2\u011a"+
    "\3\0\1\u011a\2\0\4\u011a\2\0\2\u011a\11\0\3\u011b"+
    "\10\0\1\u011b\1\0\1\u011b\1\0\1\u011b\2\0\1\u011b"+
    "\24\0\1\u011b\3\0\2\u011b\3\0\1\u011b\2\0\4\u011b"+
    "\2\0\2\u011b\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\2\1\2\11\16\1\2\11"+
    "\1\1\13\11\16\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\2\11\3\1\7\11\1\1\4\11\1\1\1\11"+
    "\1\1\2\11\3\1\7\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\11\2\1\5\11\1\1"+
    "\11\11\34\1\2\0\2\1\2\0\1\11\1\1\1\0"+
    "\2\11\35\1\1\11\1\1\2\0\1\11\1\1\2\0"+
    "\34\1\2\0\1\1\2\0\25\1\1\11\1\0\1\1"+
    "\1\11\1\0\13\1\1\0\13\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private String token;
	private StringBuffer stringConstant = new StringBuffer();
	private long characterSize;
	private long integerSize;
	private float floatConstant;
	private double doubleConstant;
	private CharacterType characterType;
	
	public String getToken() {
		return token;
	}
	
    public int getLine() {
        return yyline + 1;
    }
	
	public int getColumn() {
		return yycolumn + 1;
	}
	
	public long getCharacterSize() {
		return characterSize;
	}
	
	public CharacterType getCharacterType() {
		return characterType;
	}
	
	public long getIntegerSize() {
		return integerSize;
	}

	public double getFloatConstant() {
		return floatConstant;
	}
	
	public double getDoubleConstant() {
		return doubleConstant;
	}
	
	private int CharArrToInt(String ch) {
		int intConst = 0;
		for (int i=0; i<Math.min(32/characterSize, ch.length()); i++) {
			intConst *=256;
			intConst += ch.charAt(i);
		}
		return (char)intConst;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScannerSymbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return ScannerSymbol.EOF;
            }
            case 284: break;
            case STRING: {
              stringConstant.append((char)0); yybegin(YYINITIAL); return ScannerSymbol.StringMissingEndIndicator;
            }
            case 285: break;
            case STRING_ESCAPE_SEQUENCE: {
              yybegin(YYINITIAL); return ScannerSymbol.StringMissingEndIndicator;
            }
            case 286: break;
            case CHARACTER: {
              yybegin(YYINITIAL); return ScannerSymbol.CharacterMissingEndIndicator;
            }
            case 287: break;
            case CHARACTER_ESCAPE_SEQUENCE: {
              yybegin(YYINITIAL); return ScannerSymbol.CharacterMissingEndIndicator;
            }
            case 288: break;
            case SINGLE_LINE_COMMENT: {
              yybegin(YYINITIAL); return ScannerSymbol.Comment;
            }
            case 289: break;
            case COMMENT_BLOCK: {
              yybegin(YYINITIAL); return ScannerSymbol.CommentBlockEndIndicatorMissing;
            }
            case 290: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ScannerSymbol.InvalidToken;
            }
          case 125: break;
          case 2: 
            { 
            }
          case 126: break;
          case 3: 
            { token = yytext(); return ScannerSymbol.Identifier;
            }
          case 127: break;
          case 4: 
            { token = yytext();
		if (token.length() > 20)
			return ScannerSymbol.IntegerConstantTooLong;
		if (token.length() > 19 || Long.parseLong(token) > ((long)1)<<IntegerSize.LongSize)
			integerSize = IntegerSize.LongLongSize; 
		else if (Long.parseLong(token) <= ((long)1)<<IntegerSize.IntSize) 
			integerSize = IntegerSize.IntSize;
		else 
			integerSize = IntegerSize.LongSize; 
		return ScannerSymbol.IntegerConstant;
            }
          case 128: break;
          case 5: 
            { characterType = CharacterType.none; characterSize = 8; stringConstant.setLength(0); yybegin(STRING);
            }
          case 129: break;
          case 6: 
            { characterType = CharacterType.none; characterSize = 8; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 130: break;
          case 7: 
            { return ScannerSymbol.Mode;
            }
          case 131: break;
          case 8: 
            { return ScannerSymbol.BitwiseAnd;
            }
          case 132: break;
          case 9: 
            { return ScannerSymbol.Dot;
            }
          case 133: break;
          case 10: 
            { return ScannerSymbol.Sub;
            }
          case 134: break;
          case 11: 
            { return ScannerSymbol.Assignment;
            }
          case 135: break;
          case 12: 
            { return ScannerSymbol.LogicalNot;
            }
          case 136: break;
          case 13: 
            { return ScannerSymbol.Greater;
            }
          case 137: break;
          case 14: 
            { return ScannerSymbol.Less;
            }
          case 138: break;
          case 15: 
            { return ScannerSymbol.BitwiseOr;
            }
          case 139: break;
          case 16: 
            { return ScannerSymbol.BitwiseNot;
            }
          case 140: break;
          case 17: 
            { return ScannerSymbol.BitwiseXor;
            }
          case 141: break;
          case 18: 
            { return ScannerSymbol.Add;
            }
          case 142: break;
          case 19: 
            { return ScannerSymbol.Multiplication;
            }
          case 143: break;
          case 20: 
            { return ScannerSymbol.Division;
            }
          case 144: break;
          case 21: 
            { return ScannerSymbol.Comma;
            }
          case 145: break;
          case 22: 
            { return ScannerSymbol.Colon;
            }
          case 146: break;
          case 23: 
            { return ScannerSymbol.SemiColon;
            }
          case 147: break;
          case 24: 
            { return ScannerSymbol.CurlyBraceOpen;
            }
          case 148: break;
          case 25: 
            { return ScannerSymbol.CurlyBraceClose;
            }
          case 149: break;
          case 26: 
            { return ScannerSymbol.ParenthesisOpen;
            }
          case 150: break;
          case 27: 
            { return ScannerSymbol.ParenthesisClose;
            }
          case 151: break;
          case 28: 
            { return ScannerSymbol.BracketOpen;
            }
          case 152: break;
          case 29: 
            { return ScannerSymbol.BracketClose;
            }
          case 153: break;
          case 30: 
            { stringConstant.append(yytext());
            }
          case 154: break;
          case 31: 
            { yybegin(YYINITIAL); return ScannerSymbol.StringMissingEndIndicator;
            }
          case 155: break;
          case 32: 
            { token = stringConstant.toString(); 
		yybegin(YYINITIAL); 
		if (characterType != CharacterType.none && characterType != CharacterType.L)
			for (int i = 0; i < token.length(); i++) {
				long max = ((long)1)<<characterSize;
				if (Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(i))) >= max)
					return ScannerSymbol.InvalidCharacter;
			}
		return ScannerSymbol.StringConstant;
            }
          case 156: break;
          case 33: 
            { yybegin(STRING_ESCAPE_SEQUENCE);
            }
          case 157: break;
          case 34: 
            { yybegin(STRING); return ScannerSymbol.InvalidEscapeSequence;
            }
          case 158: break;
          case 35: 
            { yybegin(STRING);
            }
          case 159: break;
          case 36: 
            { int tempCharacter = Integer.parseInt(yytext(),8);
		yybegin(STRING); 
		stringConstant.append((char)tempCharacter);
            }
          case 160: break;
          case 37: 
            { yybegin(STRING); return ScannerSymbol.InvalidOctalCharacterLiteral;
            }
          case 161: break;
          case 38: 
            { stringConstant.append(yytext()); yybegin(STRING);
            }
          case 162: break;
          case 39: 
            { yybegin(STRING); return ScannerSymbol.InvalidHexadecimalCharacterLiteral;
            }
          case 163: break;
          case 40: 
            { yybegin(STRING); return ScannerSymbol.InvalidUniversalUnicodeCharacterLiteral;
            }
          case 164: break;
          case 41: 
            { stringConstant.append("\b"); yybegin(STRING);
            }
          case 165: break;
          case 42: 
            { stringConstant.append("\r"); yybegin(STRING);
            }
          case 166: break;
          case 43: 
            { stringConstant.append((char)7); yybegin(STRING);
            }
          case 167: break;
          case 44: 
            { stringConstant.append("\t"); yybegin(STRING);
            }
          case 168: break;
          case 45: 
            { stringConstant.append("\n"); yybegin(STRING);
            }
          case 169: break;
          case 46: 
            { stringConstant.append("\f"); yybegin(STRING);
            }
          case 170: break;
          case 47: 
            { stringConstant.append((char)11); yybegin(STRING);
            }
          case 171: break;
          case 48: 
            { yybegin(YYINITIAL); return ScannerSymbol.CharacterMissingEndIndicator;
            }
          case 172: break;
          case 49: 
            { yybegin(CHARACTER_ESCAPE_SEQUENCE);
            }
          case 173: break;
          case 50: 
            { token = stringConstant.toString();
		yybegin(YYINITIAL); 
		if (token.length()>4)
			return ScannerSymbol.CharacterTooLong; 
		if (token.length()==1)
		{
			if ((characterType != CharacterType.L && characterType != CharacterType.none) && Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(0))) >= ((long)1)<<characterSize)
				return ScannerSymbol.InvalidCharacter;
			return ScannerSymbol.CharacterConstant; 
		} else {
			if (characterType != CharacterType.none && characterType != CharacterType.L)
				return ScannerSymbol.InvalidCharacter;
				
			for (int i = 0; i < token.length(); i++)
				if (Long.parseLong(Integer.toUnsignedString((Integer)(int)token.charAt(i))) >= ((long)1)<<characterSize)
					return ScannerSymbol.InvalidCharacter;
			token = ""+CharArrToInt(token);
			integerSize = IntegerSize.IntSize;
			return ScannerSymbol.IntegerConstant;
		}
            }
          case 174: break;
          case 51: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidEscapeSequence;
            }
          case 175: break;
          case 52: 
            { yybegin(CHARACTER);
            }
          case 176: break;
          case 53: 
            { int tempCharacter = Integer.parseInt(yytext(),8);
		yybegin(CHARACTER); 
		stringConstant.append((char)tempCharacter);
            }
          case 177: break;
          case 54: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidOctalCharacterLiteral;
            }
          case 178: break;
          case 55: 
            { stringConstant.append(yytext()); yybegin(CHARACTER);
            }
          case 179: break;
          case 56: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidHexadecimalCharacterLiteral;
            }
          case 180: break;
          case 57: 
            { yybegin(CHARACTER); return ScannerSymbol.InvalidUniversalUnicodeCharacterLiteral;
            }
          case 181: break;
          case 58: 
            { stringConstant.append("\b"); yybegin(CHARACTER);
            }
          case 182: break;
          case 59: 
            { stringConstant.append("\r"); yybegin(CHARACTER);
            }
          case 183: break;
          case 60: 
            { stringConstant.append((char)7); yybegin(CHARACTER);
            }
          case 184: break;
          case 61: 
            { stringConstant.append("\t"); yybegin(CHARACTER);
            }
          case 185: break;
          case 62: 
            { stringConstant.append("\n"); yybegin(CHARACTER);
            }
          case 186: break;
          case 63: 
            { stringConstant.append("\f"); yybegin(CHARACTER);
            }
          case 187: break;
          case 64: 
            { stringConstant.append((char)11); yybegin(CHARACTER);
            }
          case 188: break;
          case 65: 
            { token = yytext();
            }
          case 189: break;
          case 66: 
            { yybegin(YYINITIAL); return ScannerSymbol.Comment;
            }
          case 190: break;
          case 67: 
            { token += yytext();
            }
          case 191: break;
          case 68: 
            { token = yytext(); doubleConstant = Double.parseDouble(token); return ScannerSymbol.DoubleConstant;
            }
          case 192: break;
          case 69: 
            { characterType = CharacterType.u; characterSize = 16; stringConstant.setLength(0); yybegin(STRING);
            }
          case 193: break;
          case 70: 
            { characterType = CharacterType.u; characterSize = 16; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 194: break;
          case 71: 
            { characterType = CharacterType.U; characterSize = 32; stringConstant.setLength(0); yybegin(STRING);
            }
          case 195: break;
          case 72: 
            { characterType = CharacterType.U; characterSize = 32; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 196: break;
          case 73: 
            { yybegin(SINGLE_LINE_COMMENT); token = "";
            }
          case 197: break;
          case 74: 
            { yybegin(COMMENT_BLOCK); token = "";
            }
          case 198: break;
          case 75: 
            { return ScannerSymbol.LogicalAnd;
            }
          case 199: break;
          case 76: 
            { token = yytext();
		return ScannerSymbol.InvalidHexadecimalIntegerConstant;
            }
          case 200: break;
          case 77: 
            { return ScannerSymbol.Decrement;
            }
          case 201: break;
          case 78: 
            { characterType = CharacterType.L; characterSize = 32; stringConstant.setLength(0); yybegin(STRING);
            }
          case 202: break;
          case 79: 
            { characterType = CharacterType.L; characterSize = 32; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 203: break;
          case 80: 
            { return ScannerSymbol.Equal;
            }
          case 204: break;
          case 81: 
            { return ScannerSymbol.NotEqual;
            }
          case 205: break;
          case 82: 
            { return ScannerSymbol.GreaterEqual;
            }
          case 206: break;
          case 83: 
            { return ScannerSymbol.LessEqual;
            }
          case 207: break;
          case 84: 
            { return ScannerSymbol.LogicalOr;
            }
          case 208: break;
          case 85: 
            { return ScannerSymbol.Increment;
            }
          case 209: break;
          case 86: 
            { return ScannerSymbol.If;
            }
          case 210: break;
          case 87: 
            { return ScannerSymbol.Do;
            }
          case 211: break;
          case 88: 
            { stringConstant.append((char)Long.parseLong(yytext().substring(1),16)); yybegin(STRING);
            }
          case 212: break;
          case 89: 
            { stringConstant.append((char)Long.parseLong(yytext().substring(1),16)); yybegin(CHARACTER);
            }
          case 213: break;
          case 90: 
            { token = yytext(); floatConstant = Float.parseFloat(token); return ScannerSymbol.FloatConstant;
            }
          case 214: break;
          case 91: 
            { characterType = CharacterType.u8; characterSize = 8; stringConstant.setLength(0); yybegin(STRING);
            }
          case 215: break;
          case 92: 
            { characterType = CharacterType.u8; characterSize = 8; stringConstant.setLength(0); yybegin(CHARACTER);
            }
          case 216: break;
          case 93: 
            { token = yytext();
		if ((token.length() - 2)*4 > IntegerSize.LongLongSize)
			return ScannerSymbol.IntegerConstantTooLong;
		if ((token.length() - 2)*4 > IntegerSize.LongSize)
			integerSize = IntegerSize.LongLongSize; 
		else if ((token.length() - 2)*4 <= IntegerSize.IntSize) 
			integerSize = IntegerSize.IntSize;
		else 
			integerSize = IntegerSize.LongSize; 
		token = Long.toUnsignedString(Long.parseLong(token.substring(2), 16));
		return ScannerSymbol.IntegerConstant;
            }
          case 217: break;
          case 94: 
            { return ScannerSymbol.Int;
            }
          case 218: break;
          case 95: 
            { return ScannerSymbol.For;
            }
          case 219: break;
          case 96: 
            { return ScannerSymbol.Bool;
            }
          case 220: break;
          case 97: 
            { return ScannerSymbol.Byte;
            }
          case 221: break;
          case 98: 
            { return ScannerSymbol.Long;
            }
          case 222: break;
          case 99: 
            { return ScannerSymbol.Else;
            }
          case 223: break;
          case 100: 
            { return ScannerSymbol.True;
            }
          case 224: break;
          case 101: 
            { return ScannerSymbol.Case;
            }
          case 225: break;
          case 102: 
            { return ScannerSymbol.Char;
            }
          case 226: break;
          case 103: 
            { return ScannerSymbol.Goto;
            }
          case 227: break;
          case 104: 
            { return ScannerSymbol.Void;
            }
          case 228: break;
          case 105: 
            { return ScannerSymbol.Until;
            }
          case 229: break;
          case 106: 
            { return ScannerSymbol.Break;
            }
          case 230: break;
          case 107: 
            { return ScannerSymbol.Const;
            }
          case 231: break;
          case 108: 
            { return ScannerSymbol.Short;
            }
          case 232: break;
          case 109: 
            { return ScannerSymbol.Float;
            }
          case 233: break;
          case 110: 
            { return ScannerSymbol.False;
            }
          case 234: break;
          case 111: 
            { return ScannerSymbol.While;
            }
          case 235: break;
          case 112: 
            { long num = Long.parseLong(yytext().substring(1),16);
		yybegin(STRING);
		stringConstant.append((char)num);
            }
          case 236: break;
          case 113: 
            { long num = Long.parseLong(yytext().substring(1),16);
		yybegin(CHARACTER);
		stringConstant.append((char)num);
            }
          case 237: break;
          case 114: 
            { return ScannerSymbol.Return;
            }
          case 238: break;
          case 115: 
            { return ScannerSymbol.Record;
            }
          case 239: break;
          case 116: 
            { return ScannerSymbol.Extern;
            }
          case 240: break;
          case 117: 
            { return ScannerSymbol.String;
            }
          case 241: break;
          case 118: 
            { return ScannerSymbol.Sizeof;
            }
          case 242: break;
          case 119: 
            { return ScannerSymbol.Switch;
            }
          case 243: break;
          case 120: 
            { return ScannerSymbol.Double;
            }
          case 244: break;
          case 121: 
            { return ScannerSymbol.Include;
            }
          case 245: break;
          case 122: 
            { return ScannerSymbol.Default;
            }
          case 246: break;
          case 123: 
            { return ScannerSymbol.Wchar;
            }
          case 247: break;
          case 124: 
            { return ScannerSymbol.Continue;
            }
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
